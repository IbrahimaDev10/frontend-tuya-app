from app import create_app, db
import sqlalchemy as sa

def complete_migration():
    """Migration compl√®te pour finaliser la table devices"""
    
    app = create_app()
    with app.app_context():
        print("üîÑ Migration finale de la table devices...")
        
        try:
            connection = db.engine.connect()
            
            # Liste des colonnes encore manquantes d'apr√®s l'erreur SQL
            missing_columns = [
                # Ces colonnes manquent dans votre table actuelle
                "ALTER TABLE devices ADD COLUMN protection_tension_config JSON NULL",
                "ALTER TABLE devices ADD COLUMN protection_desequilibre_config JSON NULL",
                
                # V√©rifier si ces colonnes manquent aussi
                "ALTER TABLE devices ADD COLUMN seuil_temperature_max FLOAT NULL DEFAULT 60.0",
            ]
            
            success_count = 0
            
            for sql_statement in missing_columns:
                column_name = sql_statement.split("ADD COLUMN")[1].split()[0]
                
                try:
                    connection.execute(sa.text(sql_statement))
                    print(f"  ‚úÖ Ajout√©: {column_name}")
                    success_count += 1
                    
                except Exception as e:
                    if "Duplicate column name" in str(e) or "already exists" in str(e):
                        print(f"  ‚ÑπÔ∏è Existe d√©j√†: {column_name}")
                    else:
                        print(f"  ‚ùå Erreur {column_name}: {e}")
            
            connection.close()
            
            print(f"\nüìä Migration termin√©e: {success_count} colonnes ajout√©es")
            
            # V√©rifier que tout fonctionne maintenant
            print("\nüß™ Test du mod√®le Device...")
            
            from app.models.device import Device
            
            # Test simple query
            device = Device.get_by_tuya_id('bf64f01f2b7e204bbczvq6')
            if device:
                print(f"  ‚úÖ Device trouv√©: {device.nom_appareil}")
            else:
                print("  ‚ÑπÔ∏è Aucun device avec cet ID trouv√©")
            
            # Test count
            count = Device.query.count()
            print(f"  ‚úÖ Total devices: {count}")
            
            print("\nüéâ Migration r√©ussie ! L'import Tuya devrait maintenant fonctionner.")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur migration: {e}")
            return False

def verify_table_structure():
    """V√©rifier la structure finale de la table"""
    
    app = create_app()
    with app.app_context():
        print("üîç V√©rification structure table devices...")
        
        try:
            inspector = db.inspect(db.engine)
            columns = inspector.get_columns('devices')
            
            print(f"üìã Total colonnes: {len(columns)}")
            
            # Colonnes critiques √† v√©rifier
            critical_columns = [
                'protection_automatique_active',
                'protection_courant_config', 
                'protection_puissance_config',
                'protection_temperature_config',
                'protection_tension_config',  # ‚Üê Cette colonne cause l'erreur
                'protection_desequilibre_config',
                'programmation_active',
                'type_systeme'
            ]
            
            column_names = [col['name'] for col in columns]
            
            print("\nüîç V√©rification colonnes critiques:")
            missing_critical = []
            
            for col in critical_columns:
                if col in column_names:
                    print(f"  ‚úÖ {col}")
                else:
                    print(f"  ‚ùå {col} MANQUANTE")
                    missing_critical.append(col)
            
            if missing_critical:
                print(f"\n‚ö†Ô∏è Colonnes manquantes: {missing_critical}")
                return False
            else:
                print("\n‚úÖ Toutes les colonnes critiques sont pr√©sentes")
                return True
                
        except Exception as e:
            print(f"‚ùå Erreur v√©rification: {e}")
            return False

def fix_enum_columns():
    """Corriger les colonnes ENUM si n√©cessaire"""
    
    app = create_app()
    with app.app_context():
        print("üîÑ V√©rification et correction des colonnes ENUM...")
        
        try:
            connection = db.engine.connect()
            
            # V√©rifier et corriger les colonnes ENUM
            enum_fixes = [
                # Statut assignation - convertir en ENUM si n√©cessaire
                "ALTER TABLE devices MODIFY COLUMN statut_assignation ENUM('non_assigne', 'assigne') NOT NULL DEFAULT 'non_assigne'",
                
                # Type syst√®me - convertir en ENUM si n√©cessaire  
                "ALTER TABLE devices MODIFY COLUMN type_systeme ENUM('monophase', 'triphase') NOT NULL DEFAULT 'monophase'",
                
                # Protection status - convertir en ENUM si n√©cessaire
                "ALTER TABLE devices MODIFY COLUMN protection_status ENUM('normal', 'protected', 'error') NOT NULL DEFAULT 'normal'",
            ]
            
            for sql_statement in enum_fixes:
                try:
                    connection.execute(sa.text(sql_statement))
                    column_name = sql_statement.split("COLUMN")[1].split()[0]
                    print(f"  ‚úÖ ENUM corrig√©: {column_name}")
                    
                except Exception as e:
                    # Les erreurs ENUM sont souvent normales si d√©j√† correct
                    column_name = sql_statement.split("COLUMN")[1].split()[0]
                    print(f"  ‚ÑπÔ∏è {column_name}: {e}")
            
            connection.close()
            print("‚úÖ Correction ENUM termin√©e")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur correction ENUM: {e}")
            return False

def reset_sqlalchemy_cache():
    """Forcer SQLAlchemy √† recharger le sch√©ma"""
    
    app = create_app()
    with app.app_context():
        print("üîÑ Reset cache SQLAlchemy...")
        
        try:
            # Forcer la r√©initialisation des m√©tadonn√©es
            db.engine.dispose()
            
            # Recr√©er la connexion
            db.create_all()
            
            print("‚úÖ Cache SQLAlchemy r√©initialis√©")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur reset cache: {e}")
            return False

if __name__ == "__main__":
    print("üöÄ Migration finale table devices")
    print("=" * 50)
    
    # 1. V√©rifier structure actuelle
    print("\n1Ô∏è‚É£ V√âRIFICATION STRUCTURE ACTUELLE")
    structure_ok = verify_table_structure()
    
    # 2. Migration des colonnes manquantes
    print("\n2Ô∏è‚É£ AJOUT COLONNES MANQUANTES")
    migration_ok = complete_migration()
    
    # 3. Correction des ENUM
    print("\n3Ô∏è‚É£ CORRECTION COLONNES ENUM")
    enum_ok = fix_enum_columns()
    
    # 4. Reset cache SQLAlchemy
    print("\n4Ô∏è‚É£ RESET CACHE SQLALCHEMY")
    cache_ok = reset_sqlalchemy_cache()
    
    # 5. V√©rification finale
    print("\n5Ô∏è‚É£ V√âRIFICATION FINALE")
    final_check = verify_table_structure()
    
    if migration_ok and final_check:
        print("\nüéâ MIGRATION R√âUSSIE!")
        print("\nVous pouvez maintenant:")
        print("  1. Red√©marrer votre application: python app.py")
        print("  2. Tester l'import Tuya dans Postman")
        print("     POST /api/devices/import-tuya")
    else:
        print("\n‚ùå Migration √©chou√©e - V√©rifiez les erreurs ci-dessus")
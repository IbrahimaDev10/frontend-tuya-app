# app/routes/alert_routes.py - VERSION FINALE CORRIG√âE
# Routes pour consultation et gestion des alertes (cr√©√©es automatiquement)

from flask import Blueprint, request, jsonify
from app.models.device import Device
from app.models.alert import Alert
from datetime import datetime, timedelta
import logging
from functools import wraps  # ‚úÖ AJOUT CRITIQUE

# Cr√©er le blueprint
alert_bp = Blueprint('alerts', __name__, url_prefix='/api/alerts')

# Import conditionnel du DeviceService
try:
    from app.services.device_service import device_service
    logging.info("‚úÖ DeviceService import√© dans alert_routes")
except ImportError:
    device_service = None
    logging.warning("‚ö†Ô∏è DeviceService non disponible dans alert_routes")

# Import conditionnel des d√©corateurs
try:
    from app.decorators import admin_required, login_required, validate_json_data
    logging.info("‚úÖ D√©corateurs officiels import√©s")
except ImportError:
    logging.warning("‚ö†Ô∏è D√©corateurs officiels non disponibles - utilisation fallbacks")
    
    # üîß D√âCORATEURS DE FALLBACK CORRIG√âS
    def admin_required(f):
        @wraps(f)  # ‚úÖ CRITIQUE : Pr√©serve le nom de fonction
        def admin_wrapper_func(*args, **kwargs):  # ‚úÖ NOM UNIQUE
            return f(*args, **kwargs)
        return admin_wrapper_func
    
    def login_required(f):
        @wraps(f)  # ‚úÖ CRITIQUE : Pr√©serve le nom de fonction
        def login_wrapper_func(*args, **kwargs):  # ‚úÖ NOM UNIQUE
            # Simuler un utilisateur admin pour les tests
            class MockUser:
                def __init__(self):
                    self.id = "test_user"
                    self.client_id = None
                def is_superadmin(self):
                    return True
            
            return f(MockUser(), *args, **kwargs)
        return login_wrapper_func
    
    def validate_json_data(required_fields):
        def decorator(f):
            @wraps(f)  # ‚úÖ CRITIQUE : Pr√©serve le nom de fonction
            def validate_wrapper_func(*args, **kwargs):  # ‚úÖ NOM UNIQUE
                data = request.get_json() or {}
                return f(*args, data=data, **kwargs)
            return validate_wrapper_func
        return decorator

# =================== ROUTES DE TEST ===================

@alert_bp.route('/test', methods=['GET'])
def test_blueprint():
    """
    üß™ TEST - V√©rifier que le blueprint fonctionne
    GET /api/alerts/test
    """
    return jsonify({
        'success': True,
        'message': 'Blueprint AlertService fonctionne !',
        'timestamp': datetime.utcnow().isoformat(),
        'blueprint_prefix': '/api/alerts',
        'device_service_status': {
            'available': device_service is not None,
            'has_alert_service': (
                device_service and 
                hasattr(device_service, '_alert_service') and 
                device_service._alert_service is not None
            ) if device_service else False
        }
    }), 200

@alert_bp.route('/test/device-import', methods=['GET'])
def test_device_import():
    """
    üß™ TEST - V√©rifier import des mod√®les
    GET /api/alerts/test/device-import
    """
    try:
        # Test import Device
        device_count = Device.query.count()
        
        # Test import Alert
        alert_count = Alert.query.count()
        
        # Sample device
        sample_device = Device.query.first()
        
        return jsonify({
            'success': True,
            'imports': {
                'Device': 'OK',
                'Alert': 'OK'
            },
            'database': {
                'total_devices': device_count,
                'total_alerts': alert_count,
                'sample_device': {
                    'id': sample_device.id if sample_device else None,
                    'nom': sample_device.nom_appareil if sample_device else None,
                    'tuya_id': sample_device.tuya_device_id if sample_device else None
                } if sample_device else None
            },
            'device_service_status': {
                'imported': device_service is not None,
                'has_alert_service': (
                    device_service and 
                    hasattr(device_service, '_alert_service') and 
                    device_service._alert_service is not None
                ) if device_service else False
            }
        }), 200
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'imports': {
                'Device': 'FAILED',
                'Alert': 'FAILED'
            }
        }), 500

# =================== ROUTES DE CONSULTATION ===================

@alert_bp.route('/device/<device_id>', methods=['GET'])
@login_required
def get_device_alerts(current_user, device_id):
    """
    üìã CONSULTER les alertes d'un appareil
    GET /api/alerts/device/{device_id}?hours_back=24&limit=50
    """
    try:
        logging.info(f"üîç get_device_alerts appel√©e avec device_id: {device_id}")
        
        # ‚úÖ RECHERCHE FLEXIBLE : par ID ou tuya_device_id
        device = Device.query.get(device_id)
        search_method = "database_id"
        
        if not device:
            device = Device.query.filter_by(tuya_device_id=device_id).first()
            search_method = "tuya_device_id"
        
        if not device:
            logging.warning(f"‚ùå Device non trouv√©: {device_id}")
            return jsonify({
                'error': 'Appareil non trouv√©', 
                'searched_id': device_id,
                'tried_methods': ['database_id', 'tuya_device_id']
            }), 404
        
        logging.info(f"‚úÖ Device trouv√© via {search_method}: {device.nom_appareil}")
        
        # V√©rifier permissions (si m√©thode disponible)
        if hasattr(device, 'peut_etre_vu_par_utilisateur'):
            try:
                if not device.peut_etre_vu_par_utilisateur(current_user):
                    return jsonify({'error': 'Acc√®s interdit'}), 403
            except Exception as perm_error:
                logging.warning(f"‚ö†Ô∏è Erreur v√©rification permissions: {perm_error}")
        
        # Param√®tres
        hours_back = request.args.get('hours_back', 24, type=int)
        limit = request.args.get('limit', 50, type=int)
        
        # Utiliser AlertService si disponible
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            logging.info("üîß Utilisation AlertService")
            try:
                result = device_service._alert_service.get_alertes_recentes(
                    device.id, hours_back=hours_back, limit=limit
                )
                # Enrichir avec info device
                if result.get('success'):
                    result['device_info'] = {
                        'id': device.id,
                        'tuya_device_id': device.tuya_device_id,
                        'nom_appareil': device.nom_appareil,
                        'search_method': search_method
                    }
                return jsonify(result), 200 if result.get('success') else 400
            except Exception as alert_service_error:
                logging.error(f"‚ùå Erreur AlertService: {alert_service_error}")
                # Continue avec fallback
        
        # Fallback direct DB
        logging.info("üóÑÔ∏è Utilisation fallback DB")
        start_time = datetime.utcnow() - timedelta(hours=hours_back)
        alertes = Alert.query.filter(
            Alert.appareil_id == device.id,
            Alert.date_creation >= start_time
        ).order_by(Alert.date_creation.desc()).limit(limit).all()
        
        alertes_data = []
        for alerte in alertes:
            try:
                if hasattr(alerte, 'to_dict'):
                    alertes_data.append(alerte.to_dict(include_details=True))
                else:
                    # Fallback basique
                    alertes_data.append({
                        'id': alerte.id,
                        'type_alerte': alerte.type_alerte,
                        'gravite': alerte.gravite,
                        'titre': alerte.titre,
                        'message': alerte.message,
                        'date_creation': alerte.date_creation.isoformat() if alerte.date_creation else None
                    })
            except Exception as serialize_error:
                logging.error(f"Erreur s√©rialisation alerte: {serialize_error}")
                continue
        
        return jsonify({
            'success': True,
            'device_info': {
                'id': device.id,
                'tuya_device_id': device.tuya_device_id,
                'nom_appareil': device.nom_appareil,
                'en_ligne': device.en_ligne,
                'search_method': search_method
            },
            'period_hours': hours_back,
            'total_alertes': len(alertes_data),
            'alertes': alertes_data,
            'data_source': 'database_fallback'
        }), 200
        
    except Exception as e:
        logging.error(f"‚ùå Erreur r√©cup√©ration alertes device {device_id}: {e}")
        return jsonify({'error': f'Erreur r√©cup√©ration alertes: {str(e)}'}), 500

@alert_bp.route('/device/<device_id>/stats', methods=['GET'])
@login_required
def get_device_alerts_stats(current_user, device_id):
    """
    üìä STATISTIQUES des alertes d'un appareil
    GET /api/alerts/device/{device_id}/stats?days=7
    """
    try:
        # Recherche flexible device
        device = Device.query.get(device_id)
        if not device:
            device = Device.query.filter_by(tuya_device_id=device_id).first()
        
        if not device:
            return jsonify({'error': 'Appareil non trouv√©'}), 404
        
        # V√©rifier permissions
        if hasattr(device, 'peut_etre_vu_par_utilisateur'):
            try:
                if not device.peut_etre_vu_par_utilisateur(current_user):
                    return jsonify({'error': 'Acc√®s interdit'}), 403
            except:
                pass
        
        days = request.args.get('days', 7, type=int)
        
        # Utiliser AlertService
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            result = device_service._alert_service.get_statistiques_alertes(device.id, jours=days)
            return jsonify(result), 200 if result.get('success') else 400
        
        # Fallback basique
        start_date = datetime.utcnow() - timedelta(days=days)
        alertes = Alert.query.filter(
            Alert.appareil_id == device.id,
            Alert.date_creation >= start_date
        ).all()
        
        # Statistiques basiques
        stats = {
            'total': len(alertes),
            'par_gravite': {'info': 0, 'warning': 0, 'critique': 0},
            'par_statut': {'nouvelle': 0, 'vue': 0, 'resolue': 0}
        }
        
        for alerte in alertes:
            if hasattr(alerte, 'gravite'):
                stats['par_gravite'][alerte.gravite] = stats['par_gravite'].get(alerte.gravite, 0) + 1
            if hasattr(alerte, 'statut'):
                stats['par_statut'][alerte.statut] = stats['par_statut'].get(alerte.statut, 0) + 1
        
        return jsonify({
            'success': True,
            'device_info': {
                'id': device.id,
                'nom_appareil': device.nom_appareil
            },
            'period_days': days,
            'stats': stats,
            'generated_at': datetime.utcnow().isoformat()
        }), 200
        
    except Exception as e:
        logging.error(f"Erreur statistiques alertes device {device_id}: {e}")
        return jsonify({'error': f'Erreur statistiques: {str(e)}'}), 500

@alert_bp.route('/device/<device_id>/active', methods=['GET'])
@login_required
def get_device_active_alerts(current_user, device_id):
    """
    üö® ALERTES ACTIVES (non r√©solues) d'un appareil
    GET /api/alerts/device/{device_id}/active
    """
    try:
        # Recherche flexible device
        device = Device.query.get(device_id)
        if not device:
            device = Device.query.filter_by(tuya_device_id=device_id).first()
        
        if not device:
            return jsonify({'error': 'Appareil non trouv√©'}), 404
        
        # V√©rifier permissions
        if hasattr(device, 'peut_etre_vu_par_utilisateur'):
            try:
                if not device.peut_etre_vu_par_utilisateur(current_user):
                    return jsonify({'error': 'Acc√®s interdit'}), 403
            except:
                pass
        
        # Utiliser AlertService
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            result = device_service._alert_service.get_alertes_actives_pour_device(device.id)
            return jsonify(result), 200 if result.get('success') else 400
        
        # Fallback direct
        alertes_actives = Alert.query.filter(
            Alert.appareil_id == device.id,
            Alert.statut.in_(['nouvelle', 'vue'])
        ).order_by(Alert.date_creation.desc()).all()
        
        alertes_data = []
        for alerte in alertes_actives:
            try:
                if hasattr(alerte, 'to_dict'):
                    alertes_data.append(alerte.to_dict(include_details=True))
                else:
                    alertes_data.append({
                        'id': alerte.id,
                        'type_alerte': alerte.type_alerte,
                        'gravite': alerte.gravite,
                        'titre': alerte.titre,
                        'message': alerte.message,
                        'statut': alerte.statut,
                        'date_creation': alerte.date_creation.isoformat() if alerte.date_creation else None
                    })
            except:
                continue
        
        return jsonify({
            'success': True,
            'device_info': {
                'id': device.id,
                'nom_appareil': device.nom_appareil
            },
            'total_actives': len(alertes_data),
            'alertes': alertes_data
        }), 200
        
    except Exception as e:
        logging.error(f"Erreur alertes actives device {device_id}: {e}")
        return jsonify({'error': f'Erreur alertes actives: {str(e)}'}), 500

# =================== ROUTES DE GESTION ===================

@alert_bp.route('/<alert_id>/resolve', methods=['POST'])
@login_required
@validate_json_data([])  # Pas de champs obligatoires
def resolve_alert(current_user, alert_id, data):
    """
    ‚úÖ R√âSOUDRE une alerte
    POST /api/alerts/{alert_id}/resolve
    Body: {"commentaire": "Probl√®me r√©solu"}
    """
    try:
        # V√©rifier que l'alerte existe
        alerte = Alert.query.get(alert_id)
        if not alerte:
            return jsonify({'error': 'Alerte non trouv√©e'}), 404
        
        # V√©rifier permissions sur l'appareil
        device = Device.query.get(alerte.appareil_id)
        if not device:
            return jsonify({'error': 'Appareil associ√© non trouv√©'}), 404
        
        if hasattr(device, 'peut_etre_controle_par_utilisateur'):
            try:
                if not device.peut_etre_controle_par_utilisateur(current_user):
                    return jsonify({'error': 'Acc√®s interdit'}), 403
            except:
                pass
        
        commentaire = data.get('commentaire', '')
        
        # Utiliser AlertService
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            result = device_service._alert_service.resoudre_alerte(
                alert_id, utilisateur_id=current_user.id, commentaire=commentaire
            )
            return jsonify(result), 200 if result.get('success') else 400
        
        # Fallback direct
        if alerte.statut == 'resolue':
            return jsonify({'error': 'Alerte d√©j√† r√©solue'}), 400
        
        if hasattr(alerte, 'resolve'):
            alerte.resolve(user_id=current_user.id)
        else:
            # Fallback manuel
            alerte.statut = 'resolue'
            alerte.date_resolution = datetime.utcnow()
            if hasattr(alerte, 'resolu_par'):
                alerte.resolu_par = current_user.id
            from app import db
            db.session.add(alerte)
            db.session.commit()
        
        return jsonify({
            'success': True,
            'message': 'Alerte r√©solue avec succ√®s',
            'alert_id': alert_id,
            'resolved_by': current_user.id,
            'commentaire': commentaire
        }), 200
        
    except Exception as e:
        logging.error(f"Erreur r√©solution alerte {alert_id}: {e}")
        return jsonify({'error': f'Erreur r√©solution alerte: {str(e)}'}), 500

@alert_bp.route('/<alert_id>/mark-seen', methods=['POST'])
@login_required
def mark_alert_seen(current_user, alert_id):
    """
    üëÅÔ∏è MARQUER une alerte comme VUE
    POST /api/alerts/{alert_id}/mark-seen
    """
    try:
        alerte = Alert.query.get(alert_id)
        if not alerte:
            return jsonify({'error': 'Alerte non trouv√©e'}), 404
        
        device = Device.query.get(alerte.appareil_id)
        if not device:
            return jsonify({'error': 'Appareil associ√© non trouv√©'}), 404
        
        if hasattr(device, 'peut_etre_vu_par_utilisateur'):
            try:
                if not device.peut_etre_vu_par_utilisateur(current_user):
                    return jsonify({'error': 'Acc√®s interdit'}), 403
            except:
                pass
        
        # Utiliser AlertService
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            result = device_service._alert_service.marquer_alerte_vue(alert_id, utilisateur_id=current_user.id)
            return jsonify(result), 200 if result.get('success') else 400
        
        # Fallback direct
        if alerte.statut != 'nouvelle':
            return jsonify({'error': f'Alerte d√©j√† {alerte.statut}'}), 400
        
        if hasattr(alerte, 'mark_as_seen'):
            alerte.mark_as_seen()
        else:
            # Fallback manuel
            alerte.statut = 'vue'
            from app import db
            db.session.add(alerte)
            db.session.commit()
        
        return jsonify({
            'success': True,
            'message': 'Alerte marqu√©e comme vue',
            'alert_id': alert_id,
            'marked_by': current_user.id
        }), 200
        
    except Exception as e:
        logging.error(f"Erreur marquage alerte {alert_id}: {e}")
        return jsonify({'error': f'Erreur marquage alerte: {str(e)}'}), 500

# =================== ROUTES D'ANALYSE PONCTUELLE ===================

@alert_bp.route('/analyze-client/<client_id>', methods=['POST'])
@admin_required
@validate_json_data([])
def analyze_client_alerts(current_user, client_id, data):
    """
    üî¨ ANALYSE COMPL√àTE d'un client
    POST /api/alerts/analyze-client/{client_id}
    Body: {"use_cache": true}
    """
    try:
        # V√©rifier permissions client
        if hasattr(current_user, 'is_superadmin') and hasattr(current_user, 'client_id'):
            try:
                if not current_user.is_superadmin() and current_user.client_id != client_id:
                    return jsonify({'error': 'Acc√®s interdit √† ce client'}), 403
            except:
                pass
        
        use_cache = data.get('use_cache', True)
        
        # Utiliser AlertService pour analyse compl√®te
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            result = device_service._alert_service.analyser_client_complet(
                client_id, {'use_cache': use_cache}
            )
            return jsonify(result), 200 if result.get('success') else 400
        
        return jsonify({
            'success': False,
            'error': 'Service d\'analyse non disponible',
            'message': 'AlertService requis pour cette fonctionnalit√©'
        }), 501
        
    except Exception as e:
        logging.error(f"Erreur analyse client {client_id}: {e}")
        return jsonify({'error': f'Erreur analyse client: {str(e)}'}), 500

@alert_bp.route('/critical', methods=['GET'])
@admin_required
def get_critical_alerts(current_user):
    """
    üö® ALERTES CRITIQUES syst√®me
    GET /api/alerts/critical?hours_back=24
    """
    try:
        hours_back = request.args.get('hours_back', 24, type=int)
        client_filter = None
        
        # Filtrer par client si pas superadmin
        if hasattr(current_user, 'is_superadmin') and hasattr(current_user, 'client_id'):
            try:
                client_filter = None if current_user.is_superadmin() else current_user.client_id
            except:
                pass
        
        # Utiliser AlertService
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            result = device_service._alert_service.get_alertes_critiques_recentes(
                heures=hours_back
            )
            
            # Filtrer par client si n√©cessaire
            if client_filter and result.get('success'):
                alertes_filtrees = [
                    a for a in result.get('alertes', []) 
                    if a.get('client_id') == client_filter
                ]
                result['alertes'] = alertes_filtrees
                result['total_critiques'] = len(alertes_filtrees)
            
            return jsonify(result), 200 if result.get('success') else 400
        
        # Fallback direct
        start_time = datetime.utcnow() - timedelta(hours=hours_back)
        query = Alert.query.filter(
            Alert.gravite == 'critique',
            Alert.date_creation >= start_time
        )
        
        if client_filter:
            query = query.filter_by(client_id=client_filter)
        
        alertes = query.order_by(Alert.date_creation.desc()).all()
        
        alertes_data = []
        for alerte in alertes:
            try:
                if hasattr(alerte, 'to_dict'):
                    alertes_data.append(alerte.to_dict(include_details=True))
                else:
                    alertes_data.append({
                        'id': alerte.id,
                        'appareil_id': alerte.appareil_id,
                        'type_alerte': alerte.type_alerte,
                        'gravite': alerte.gravite,
                        'titre': alerte.titre,
                        'message': alerte.message,
                        'date_creation': alerte.date_creation.isoformat() if alerte.date_creation else None
                    })
            except:
                continue
        
        return jsonify({
            'success': True,
            'total_critiques': len(alertes_data),
            'period_hours': hours_back,
            'alertes': alertes_data
        }), 200
        
    except Exception as e:
        logging.error(f"Erreur alertes critiques: {e}")
        return jsonify({'error': f'Erreur alertes critiques: {str(e)}'}), 500

# =================== ROUTE DE SANT√â ===================

@alert_bp.route('/health', methods=['GET'])
def health_check():
    """
    ‚ù§Ô∏è SANT√â du service AlertService
    GET /api/alerts/health
    """
    try:
        health_info = {
            'service': 'AlertService',
            'status': 'unknown',
            'timestamp': datetime.utcnow().isoformat(),
            'components': {}
        }
        
        # Test AlertService
        if device_service and hasattr(device_service, '_alert_service') and device_service._alert_service:
            health_info['components']['alert_service'] = {
                'status': 'available',
                'loaded': True
            }
            
            # Test sant√© d√©taill√©e si m√©thode disponible
            if hasattr(device_service._alert_service, 'get_service_health'):
                try:
                    detailed_health = device_service._alert_service.get_service_health()
                    health_info['detailed_health'] = detailed_health
                except Exception as e:
                    health_info['detailed_health'] = {'error': str(e)}
        else:
            health_info['components']['alert_service'] = {
                'status': 'unavailable',
                'loaded': False
            }
        
        # Test Database
        try:
            alert_count = Alert.query.limit(1).count()
            device_count = Device.query.limit(1).count()
            health_info['components']['database'] = {
                'status': 'healthy',
                'connection': True,
                'test_counts': {
                    'alerts': alert_count,
                    'devices': device_count
                }
            }
        except Exception as e:
            health_info['components']['database'] = {
                'status': 'error',
                'error': str(e)
            }
        
        # D√©terminer statut global
        all_healthy = all(
            comp.get('status') in ['healthy', 'available'] 
            for comp in health_info['components'].values()
        )
        
        health_info['status'] = 'healthy' if all_healthy else 'degraded'
        
        return jsonify(health_info), 200
        
    except Exception as e:
        return jsonify({
            'service': 'AlertService',
            'status': 'error',
            'error': str(e),
            'timestamp': datetime.utcnow().isoformat()
        }), 500
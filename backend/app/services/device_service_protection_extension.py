# app/services/device_service_protection_extension.py - VERSION FINALE CORRIG√âE
# ‚úÖ PROTECTION AUTOMATIQUE & PROGRAMMATION HORAIRES
# üîß Utilise EXCLUSIVEMENT vos vraies m√©thodes de ProtectionEvent et ScheduledAction

import asyncio
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional, Any
import json
import logging
from app.models.device import Device
from app.models.device_data import DeviceData
from app.models.scheduled_action import ScheduledAction
from app.models.protection_event import ProtectionEvent
from app import db

class DeviceServiceProtectionExtension:
    """Extension pour Protection Automatique & Programmation Horaires - VERSION FINALE"""
    
    def __init__(self, device_service):
        self.device_service = device_service
        self.redis = device_service.redis
        self.logger = logging.getLogger(__name__)
        
        # Configuration cache protection
        self.protection_cache_config = {
            'protection_status_ttl': 300,      # 5 min - Statut protection
            'schedule_cache_ttl': 3600,        # 1h - Programmations horaires
            'pending_actions_ttl': 7200,       # 2h - Actions en attente
            'threshold_events_ttl': 1800,      # 30 min - √âv√©nements seuils
            'restart_queue_ttl': 3600,         # 1h - Queue des red√©marrages
            'protection_history_ttl': 86400    # 24h - Historique protection
        }
        
        # Configuration protection par d√©faut
        self.default_protection_config = {
            'tension_protection': {
                'enabled': True,
                'min_threshold': 200.0,
                'max_threshold': 250.0,
                'auto_shutdown': True,
                'restart_delay_minutes': 1,
                'max_retries': 3
            },
            'courant_protection': {
                'enabled': True,
                'max_threshold': 20.0,
                'auto_shutdown': True,
                'restart_delay_minutes': 5,
                'max_retries': 2
            },
            'temperature_protection': {
                'enabled': True,
                'max_threshold': 60.0,
                'auto_shutdown': True,
                'restart_delay_minutes': 10,
                'max_retries': 1
            }
        }
        
        self.logger.info("‚úÖ DeviceService Protection Extension initialis√©e (VERSION FINALE)")
    
    # =================== üõ°Ô∏è PROTECTION AUTOMATIQUE ===================
    
    def configure_device_protection(self, device_id: str, protection_config: Dict) -> Dict:
        """
        Configurer protection automatique pour un appareil
        """
        try:
            device = self._get_device_by_id(device_id)
            if not device:
                return {"success": False, "error": "Appareil non trouv√©"}
            
            self.logger.info(f"üõ°Ô∏è Configuration protection pour device {device.id}")
            
            # Valider et enrichir la configuration
            validated_config = self._validate_protection_config(protection_config)
            
            # ‚úÖ CORRECTION : Sauvegarder selon vos attributs r√©els
            try:
                if hasattr(device, 'protection_automatique_active'):
                    device.protection_automatique_active = validated_config.get('enabled', True)
                if hasattr(device, 'protection_config'):
                    device.protection_config = validated_config
                elif hasattr(device, 'config'):
                    if not device.config:
                        device.config = {}
                    device.config['protection'] = validated_config
                
                if hasattr(device, 'derniere_modification_protection'):
                    device.derniere_modification_protection = datetime.utcnow()
                
                db.session.add(device)
                db.session.commit()
                
            except Exception as attr_error:
                self.logger.warning(f"Attributs protection non trouv√©s sur Device: {attr_error}")
            
            # ‚úÖ Mettre en cache
            if self.redis:
                self._cache_protection_config(device.id, validated_config)
            
            return {
                "success": True,
                "message": "Protection configur√©e avec succ√®s",
                "device_id": device.id,
                "protection_config": validated_config,
                "monitoring_active": validated_config.get('enabled', True)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur configuration protection device {device_id}: {e}")
            return {"success": False, "error": str(e)}
    
    def check_device_thresholds(self, device_data: DeviceData, device: Device) -> Dict:
        """
        V√©rifier seuils et d√©clencher protection automatique
        """
        try:
            # ‚úÖ CORRECTION : V√©rifier protection active avec fallback
            protection_active = getattr(device, 'protection_automatique_active', False)
            if not protection_active:
                return {"success": True, "protection_triggered": False, "reason": "Protection d√©sactiv√©e"}
            
            protection_config = self._get_device_protection_config(device)
            protection_events = []
            shutdown_required = False
            
            self.logger.debug(f"üîç V√©rification seuils protection pour device {device.id}")
            
            # ‚úÖ 1. V√©rifier protection tension
            if protection_config.get('tension_protection', {}).get('enabled', True):
                tension_event = self._check_tension_protection(device_data, device, protection_config['tension_protection'])
                if tension_event:
                    protection_events.append(tension_event)
                    if tension_event.get('requires_shutdown'):
                        shutdown_required = True
            
            # ‚úÖ 2. V√©rifier protection courant
            if protection_config.get('courant_protection', {}).get('enabled', True):
                courant_event = self._check_courant_protection(device_data, device, protection_config['courant_protection'])
                if courant_event:
                    protection_events.append(courant_event)
                    if courant_event.get('requires_shutdown'):
                        shutdown_required = True
            
            # ‚úÖ 3. V√©rifier protection temp√©rature
            if protection_config.get('temperature_protection', {}).get('enabled', True):
                temp_event = self._check_temperature_protection(device_data, device, protection_config['temperature_protection'])
                if temp_event:
                    protection_events.append(temp_event)
                    if temp_event.get('requires_shutdown'):
                        shutdown_required = True
            
            # ‚úÖ 4. D√©clencher extinction si n√©cessaire
            if shutdown_required:
                shutdown_result = self.auto_shutdown_device(
                    device.id, 
                    "Seuils de protection d√©pass√©s", 
                    protection_events
                )
                
                return {
                    "success": True,
                    "protection_triggered": True,
                    "shutdown_executed": shutdown_result.get('success', False),
                    "protection_events": protection_events,
                    "shutdown_details": shutdown_result
                }
            
            # ‚úÖ 5. Enregistrer √©v√©nements non-critiques
            for event in protection_events:
                self._log_protection_event(device, event)
            
            return {
                "success": True,
                "protection_triggered": len(protection_events) > 0,
                "shutdown_executed": False,
                "protection_events": protection_events
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification seuils device {device.id}: {e}")
            return {"success": False, "error": str(e)}
    
    def auto_shutdown_device(self, device_id: str, reason: str, trigger_data: Any) -> Dict:
        """
        Extinction automatique s√©curis√©e d'un appareil
        """
        try:
            device = self._get_device_by_id(device_id)
            if not device:
                return {"success": False, "error": "Appareil non trouv√©"}
            
            self.logger.warning(f"üö® EXTINCTION AUTOMATIQUE - Device {device.id}: {reason}")
            
            # ‚úÖ 1. V√©rifier si extinction d√©j√† en cours
            if self._is_shutdown_in_progress(device.id):
                return {
                    "success": False, 
                    "error": "Extinction d√©j√† en cours",
                    "current_status": "shutdown_pending"
                }
            
            # ‚úÖ 2. Marquer extinction en cours
            self._mark_shutdown_in_progress(device.id, reason)
            
            # ‚úÖ 3. Ex√©cuter extinction via Tuya
            shutdown_result = self.device_service.control_device(
                device.tuya_device_id, 
                "switch", 
                False,  # OFF
                invalidate_cache=True
            )
            
            if not shutdown_result.get("success"):
                self._clear_shutdown_in_progress(device.id)
                return {
                    "success": False,
                    "error": f"√âchec extinction Tuya: {shutdown_result.get('error')}",
                    "tuya_result": shutdown_result
                }
            
            # ‚úÖ 4. Cr√©er √©v√©nement protection critique - UTILISE VOS VRAIES M√âTHODES
            protection_event = self._create_protection_event_with_your_model(
                device=device,
                event_type="auto_shutdown",
                reason=reason,
                trigger_data=trigger_data
            )
            
            # ‚úÖ 5. Programmer red√©marrage automatique
            restart_delay = self._get_restart_delay_for_trigger(trigger_data)
            restart_scheduled = self.schedule_device_restart(
                device.id, 
                delay_minutes=restart_delay,
                reason=f"Auto-restart apr√®s: {reason}"
            )
            
            # ‚úÖ 6. Mettre √† jour cache et statut
            if self.redis:
                self._cache_protection_event(device.id, protection_event)
            
            self._clear_shutdown_in_progress(device.id)
            
            return {
                "success": True,
                "message": f"Appareil √©teint automatiquement: {reason}",
                "device_id": device.id,
                "shutdown_timestamp": datetime.utcnow().isoformat(),
                "reason": reason,
                "protection_event_id": protection_event.id if protection_event else None,
                "restart_scheduled": restart_scheduled.get('success', False),
                "restart_eta": restart_scheduled.get('restart_eta'),
                "tuya_result": shutdown_result
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur extinction auto device {device_id}: {e}")
            # Nettoyer √©tat si erreur
            if device_id:
                self._clear_shutdown_in_progress(device_id)
            return {"success": False, "error": str(e)}
    
    def schedule_device_restart(self, device_id: str, delay_minutes: int = 1, reason: str = "Auto-restart") -> Dict:
        """
        Programmer rallumage automatique d'un appareil - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            device = self._get_device_by_id(device_id)
            if not device:
                return {"success": False, "error": "Appareil non trouv√©"}
            
            restart_time = datetime.utcnow() + timedelta(minutes=delay_minutes)
            
            self.logger.info(f"‚è∞ Programmation restart device {device.id} dans {delay_minutes}min")
            
            # ‚úÖ CORRECTION COMPL√àTE : Utiliser VOS vraies m√©thodes ScheduledAction
            scheduled_action = ScheduledAction.creer_action_simple(
                client_id=device.client_id,
                appareil_id=device.id,
                action_type='turn_on',  # Selon votre enum
                heure=restart_time.strftime('%H:%M'),
                jours=[restart_time.weekday() + 1],  # Jour actuel
                nom_action=f"Auto-restart: {reason}",
                user_id=None  # Syst√®me
            )
            
            if not scheduled_action:
                return {"success": False, "error": "√âchec cr√©ation action programm√©e"}
            
            # Modifier pour √™tre un restart unique
            scheduled_action.custom_command = {
                "command": "switch",
                "value": True,
                "reason": reason,
                "trigger_type": "protection_auto_restart"
            }
            scheduled_action.mode_execution = 'once'
            scheduled_action.date_debut = restart_time.date()
            scheduled_action.date_fin = restart_time.date()
            scheduled_action.retry_attempts = 3
            
            db.session.commit()
            
            # ‚úÖ 2. Ajouter √† la queue Redis
            if self.redis:
                self._add_to_restart_queue(device.id, scheduled_action.id, restart_time)
            
            return {
                "success": True,
                "message": f"Restart programm√© dans {delay_minutes} minute(s)",
                "device_id": device.id,
                "scheduled_action_id": scheduled_action.id,
                "restart_eta": restart_time.isoformat(),
                "delay_minutes": delay_minutes,
                "reason": reason
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur programmation restart device {device_id}: {e}")
            return {"success": False, "error": str(e)}
    
    def execute_pending_restarts(self) -> Dict:
        """
        Ex√©cuter les red√©marrages programm√©s en attente - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            now = datetime.utcnow()
            
            # ‚úÖ CORRECTION : Utiliser VOS vraies m√©thodes
            # Chercher actions dues avec custom_command contenant protection_auto_restart
            pending_actions = ScheduledAction.get_actions_dues(tolerance_minutes=2)
            
            # Filtrer pour les restarts automatiques
            restart_actions = []
            for action in pending_actions:
                if (action.custom_command and 
                    action.custom_command.get('trigger_type') == 'protection_auto_restart'):
                    restart_actions.append(action)
            
            if not restart_actions:
                return {
                    "success": True,
                    "message": "Aucun restart en attente",
                    "executed_count": 0
                }
            
            self.logger.info(f"‚ö° Ex√©cution de {len(restart_actions)} restarts programm√©s")
            
            executed_count = 0
            failed_count = 0
            results = []
            
            for action in restart_actions:
                try:
                    # V√©rifier conditions avant restart
                    restart_check = self.smart_restart_check(action.appareil_id)
                    
                    if not restart_check.get('safe_to_restart', False):
                        # ‚úÖ UTILISER VOS M√âTHODES : Reporter avec retry
                        if action.should_retry():
                            # Reprogrammer dans 5 minutes
                            new_time = (now + timedelta(minutes=5)).time()
                            action.heure_execution = new_time
                            action.calculer_prochaine_execution()
                            action.executions_echouees += 1
                        else:
                            # Trop de tentatives
                            action.marquer_execution(
                                success=False, 
                                error_message=restart_check.get('reason', 'Conditions non s√ªres')
                            )
                            action.desactiver()
                        
                        results.append({
                            "action_id": action.id,
                            "device_id": action.appareil_id,
                            "status": "postponed" if action.should_retry() else "failed",
                            "reason": restart_check.get('reason')
                        })
                        continue
                    
                    # Ex√©cuter restart
                    device = Device.query.get(action.appareil_id)
                    if device:
                        control_result = self.device_service.control_device(
                            device.tuya_device_id,
                            "switch",
                            True,  # ON
                            invalidate_cache=True
                        )
                        
                        if control_result.get("success"):
                            # ‚úÖ UTILISER VOS M√âTHODES
                            action.marquer_execution(success=True)
                            action.desactiver()  # Restart ponctuel termin√©
                            
                            executed_count += 1
                            
                            # Logger √©v√©nement
                            self._log_restart_event(device, action)
                            
                            results.append({
                                "action_id": action.id,
                                "device_id": action.appareil_id,
                                "status": "success",
                                "executed_at": action.derniere_execution.isoformat() if action.derniere_execution else now.isoformat()
                            })
                        else:
                            # ‚úÖ UTILISER VOS M√âTHODES
                            action.marquer_execution(
                                success=False, 
                                error_message=control_result.get('error', 'Erreur contr√¥le Tuya')
                            )
                            
                            failed_count += 1
                            
                            results.append({
                                "action_id": action.id,
                                "device_id": action.appareil_id,
                                "status": "failed",
                                "error": control_result.get('error')
                            })
                    
                except Exception as e:
                    self.logger.error(f"Erreur ex√©cution restart action {action.id}: {e}")
                    
                    # ‚úÖ UTILISER VOS M√âTHODES
                    action.marquer_execution(success=False, error_message=str(e))
                    
                    failed_count += 1
                    
                    results.append({
                        "action_id": action.id,
                        "device_id": getattr(action, 'appareil_id', 'unknown'),
                        "status": "failed",
                        "error": str(e)
                    })
            
            return {
                "success": True,
                "message": f"Restarts ex√©cut√©s: {executed_count} r√©ussis, {failed_count} √©chou√©s",
                "total_processed": len(restart_actions),
                "executed_count": executed_count,
                "failed_count": failed_count,
                "results": results
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur ex√©cution restarts: {e}")
            return {"success": False, "error": str(e)}
    
    def smart_restart_check(self, device_id: str) -> Dict:
        """
        V√©rifier conditions avant rallumage automatique
        """
        try:
            device = self._get_device_by_id(device_id)
            if not device:
                return {
                    "safe_to_restart": False,
                    "reason": "Appareil non trouv√©"
                }
            
            # ‚úÖ 1. V√©rifier derni√®res donn√©es
            latest_data = DeviceData.query.filter_by(
                appareil_id=device.id
            ).order_by(DeviceData.horodatage.desc()).first()
            
            if not latest_data:
                return {
                    "safe_to_restart": True,
                    "reason": "Aucune donn√©e r√©cente - red√©marrage autoris√©"
                }
            
            # ‚úÖ 2. V√©rifier que les conditions qui ont caus√© l'extinction sont r√©solues
            protection_config = self._get_device_protection_config(device)
            
            # V√©rifier tension
            if latest_data.tension:
                tension_config = protection_config.get('tension_protection', {})
                min_threshold = tension_config.get('min_threshold', 200)
                max_threshold = tension_config.get('max_threshold', 250)
                
                if latest_data.tension < min_threshold or latest_data.tension > max_threshold:
                    return {
                        "safe_to_restart": False,
                        "reason": f"Tension toujours hors limites: {latest_data.tension}V (limites: {min_threshold}-{max_threshold}V)",
                        "current_tension": latest_data.tension,
                        "thresholds": {"min": min_threshold, "max": max_threshold}
                    }
            
            # V√©rifier courant
            if latest_data.courant:
                courant_config = protection_config.get('courant_protection', {})
                max_threshold = courant_config.get('max_threshold', 20)
                
                if latest_data.courant > max_threshold:
                    return {
                        "safe_to_restart": False,
                        "reason": f"Courant toujours √©lev√©: {latest_data.courant}A (max: {max_threshold}A)",
                        "current_courant": latest_data.courant,
                        "max_threshold": max_threshold
                    }
            
            # V√©rifier temp√©rature
            if latest_data.temperature:
                temp_config = protection_config.get('temperature_protection', {})
                max_threshold = temp_config.get('max_threshold', 60)
                
                if latest_data.temperature > max_threshold:
                    return {
                        "safe_to_restart": False,
                        "reason": f"Temp√©rature toujours √©lev√©e: {latest_data.temperature}¬∞C (max: {max_threshold}¬∞C)",
                        "current_temperature": latest_data.temperature,
                        "max_threshold": max_threshold
                    }
            
            return {
                "safe_to_restart": True,
                "reason": "Conditions normales - red√©marrage s√ªr",
                "last_data_timestamp": latest_data.horodatage.isoformat(),
                "current_values": {
                    "tension": latest_data.tension,
                    "courant": latest_data.courant,
                    "temperature": latest_data.temperature
                }
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification restart device {device_id}: {e}")
            return {
                "safe_to_restart": False,
                "reason": f"Erreur v√©rification: {str(e)}"
            }
    
    # =================== üïê PROGRAMMATION HORAIRES ===================
    
    def configure_device_schedule(self, device_id: str, schedule_config: Dict) -> Dict:
        """
        Configurer programmation horaires allumage/extinction - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            device = self._get_device_by_id(device_id)
            if not device:
                return {"success": False, "error": "Appareil non trouv√©"}
            
            self.logger.info(f"‚è∞ Configuration horaires pour device {device.id}")
            
            # Valider configuration
            validated_config = self._validate_schedule_config(schedule_config)
            
            # ‚úÖ CORRECTION : Sauvegarder avec vos attributs
            try:
                if hasattr(device, 'programmation_active'):
                    device.programmation_active = validated_config.get('enabled', True)
                if hasattr(device, 'horaires_config'):
                    device.horaires_config = validated_config
                elif hasattr(device, 'config'):
                    if not device.config:
                        device.config = {}
                    device.config['horaires'] = validated_config
                
                if hasattr(device, 'derniere_modification_horaires'):
                    device.derniere_modification_horaires = datetime.utcnow()
                
                db.session.add(device)
                db.session.commit()
                
            except Exception as attr_error:
                self.logger.warning(f"Attributs programmation non trouv√©s sur Device: {attr_error}")
            
            # ‚úÖ Mettre en cache
            if self.redis:
                self._cache_schedule_config(device.id, validated_config)
            
            # ‚úÖ Cr√©er actions programm√©es avec VOS vraies m√©thodes
            if validated_config.get('enabled', True):
                self._create_scheduled_actions_with_your_model(device, validated_config)
            
            return {
                "success": True,
                "message": "Programmation configur√©e avec succ√®s",
                "device_id": device.id,
                "schedule_config": validated_config,
                "active": validated_config.get('enabled', True)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur configuration horaires device {device_id}: {e}")
            return {"success": False, "error": str(e)}
    
    def execute_scheduled_actions(self, max_actions: int = 50) -> Dict:
        """
        Ex√©cuter actions programm√©es en attente - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            # ‚úÖ UTILISER VOS VRAIES M√âTHODES
            pending_actions = ScheduledAction.get_actions_dues(tolerance_minutes=2)
            
            # Filtrer pour exclure les restarts automatiques (d√©j√† g√©r√©s ailleurs)
            schedule_actions = []
            for action in pending_actions:
                if not (action.custom_command and 
                        action.custom_command.get('trigger_type') == 'protection_auto_restart'):
                    schedule_actions.append(action)
            
            if not schedule_actions:
                return {
                    "success": True,
                    "message": "Aucune action programm√©e en attente",
                    "executed_count": 0
                }
            
            # Limiter le nombre d'actions √† traiter
            schedule_actions = schedule_actions[:max_actions]
            
            self.logger.info(f"üìÖ Ex√©cution de {len(schedule_actions)} actions programm√©es")
            
            executed_count = 0
            failed_count = 0
            results = []
            
            for action in schedule_actions:
                try:
                    device = Device.query.get(action.appareil_id)
                    if not device:
                        action.marquer_execution(success=False, error_message="Appareil non trouv√©")
                        failed_count += 1
                        continue
                    
                    # V√©rifier si programmation toujours active
                    programmation_active = getattr(device, 'programmation_active', True)
                    if not programmation_active:
                        action.marquer_execution(success=False, error_message="Programmation d√©sactiv√©e")
                        continue
                    
                    # V√©rifier mode manuel
                    if self.is_manual_mode_active(device.id):
                        action.marquer_execution(success=False, error_message="Mode manuel actif")
                        continue
                    
                    # D√©terminer commande et valeur
                    if action.custom_command:
                        command = action.custom_command.get('command', 'switch')
                        value = action.custom_command.get('value', True if action.action_type == 'turn_on' else False)
                    else:
                        command = 'switch'
                        value = True if action.action_type == 'turn_on' else False
                    
                    # Ex√©cuter action
                    control_result = self.device_service.control_device(
                        device.tuya_device_id,
                        command,
                        value,
                        invalidate_cache=True
                    )
                    
                    if control_result.get("success"):
                        action.marquer_execution(success=True)
                        executed_count += 1
                        
                        # Logger √©v√©nement
                        self._log_scheduled_event(device, action, command, value)
                        
                        results.append({
                            "action_id": action.id,
                            "device_id": device.id,
                            "device_name": getattr(device, 'nom_appareil', device.id),
                            "action_type": action.action_type,
                            "status": "success",
                            "command": command,
                            "value": value
                        })
                    else:
                        error_msg = control_result.get('error', 'Erreur contr√¥le Tuya')
                        action.marquer_execution(success=False, error_message=error_msg)
                        failed_count += 1
                        
                        results.append({
                            "action_id": action.id,
                            "device_id": device.id,
                            "status": "failed",
                            "error": error_msg
                        })
                    
                except Exception as e:
                    self.logger.error(f"Erreur ex√©cution action programm√©e {action.id}: {e}")
                    try:
                        action.marquer_execution(success=False, error_message=str(e))
                    except:
                        pass
                    failed_count += 1
                    
                    results.append({
                        "action_id": getattr(action, 'id', 'unknown'),
                        "device_id": getattr(action, 'appareil_id', 'unknown'),
                        "status": "failed",
                        "error": str(e)
                    })
            
            return {
                "success": True,
                "message": f"Actions ex√©cut√©es: {executed_count} r√©ussies, {failed_count} √©chou√©es",
                "total_processed": len(schedule_actions),
                "executed_count": executed_count,
                "failed_count": failed_count,
                "results": results
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur ex√©cution actions programm√©es: {e}")
            return {"success": False, "error": str(e)}
    
    def get_device_schedule_status(self, device_id: str) -> Dict:
        """
        R√©cup√©rer statut programmation d'un appareil - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            device = self._get_device_by_id(device_id)
            if not device:
                return {"success": False, "error": "Appareil non trouv√©"}
            
            schedule_config = self._get_device_schedule_config(device)
            
            # ‚úÖ UTILISER VOS VRAIES M√âTHODES : R√©cup√©rer actions programm√©es pour cet appareil
            next_actions = ScheduledAction.get_actions_by_device(device.id)[:5]  
            # ‚úÖ UTILISER VOS VRAIES M√âTHODES : R√©cup√©rer actions programm√©es pour cet appareil
            device_actions = ScheduledAction.get_actions_by_device(device.id)
            
            # Filtrer pour les prochaines actions actives
            next_actions = []
            now = datetime.utcnow()
            for action in device_actions:
                if action.actif and action.prochaine_execution and action.prochaine_execution > now:
                    next_actions.append({
                        'action_type': action.action_type,
                        'scheduled_time': action.prochaine_execution.isoformat(),
                        'nom_action': action.nom_action,
                        'jours_semaine_noms': action.get_jours_semaine_noms(),
                        'time_until': str(action.prochaine_execution - now)
                    })
            
            # Trier par prochaine ex√©cution et limiter √† 5
            next_actions.sort(key=lambda x: x['scheduled_time'])
            next_actions = next_actions[:5]
            
            # ‚úÖ HISTORIQUE R√âCENT avec vos vraies m√©thodes
            recent_actions = []
            for action in device_actions:
                if action.derniere_execution:
                    recent_actions.append({
                        "action_type": action.action_type,
                        "scheduled_time": action.prochaine_execution.isoformat() if action.prochaine_execution else None,
                        "executed_at": action.derniere_execution.isoformat(),
                        "status": "completed" if action.derniere_execution_success else "failed",
                        "error": action.derniere_execution_error,
                        "nom_action": action.nom_action,
                        "taux_reussite": action.get_taux_reussite()
                    })
            
            # Trier par derni√®re ex√©cution et limiter √† 10
            recent_actions.sort(key=lambda x: x['executed_at'], reverse=True)
            recent_actions = recent_actions[:10]
            
            return {
                "success": True,
                "device_id": device.id,
                "device_name": getattr(device, 'nom_appareil', f'Device {device.id}'),
                "programmation_active": getattr(device, 'programmation_active', False),
                "schedule_config": schedule_config,
                "next_actions": next_actions,
                "recent_executions": recent_actions,
                "total_actions": len(device_actions),
                "active_actions": len([a for a in device_actions if a.actif]),
                "last_modification": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur statut programmation device {device_id}: {e}")
            return {"success": False, "error": str(e)}
    
    def disable_device_schedule(self, device_id: str) -> Dict:
        """
        D√©sactiver programmation horaires d'un appareil - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            device = self._get_device_by_id(device_id)
            if not device:
                return {"success": False, "error": "Appareil non trouv√©"}
            
            # ‚úÖ CORRECTION : D√©sactiver avec vos attributs
            try:
                if hasattr(device, 'programmation_active'):
                    device.programmation_active = False
                if hasattr(device, 'derniere_modification_horaires'):
                    device.derniere_modification_horaires = datetime.utcnow()
                
                db.session.add(device)
                db.session.commit()
            except Exception as attr_error:
                self.logger.warning(f"Attributs programmation non trouv√©s: {attr_error}")
            
            # ‚úÖ UTILISER VOS VRAIES M√âTHODES : D√©sactiver toutes les actions
            device_actions = ScheduledAction.get_actions_by_device(device.id)
            cancelled_count = 0
            
            for action in device_actions:
                if action.actif and action.action_type in ["turn_on", "turn_off"]:
                    action.desactiver()
                    cancelled_count += 1
            
            # Nettoyer cache
            if self.redis:
                self._clear_schedule_cache(device.id)
            
            return {
                "success": True,
                "message": "Programmation d√©sactiv√©e",
                "device_id": device.id,
                "cancelled_actions": cancelled_count
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur d√©sactivation programmation device {device_id}: {e}")
            return {"success": False, "error": str(e)}
    
    def get_next_scheduled_actions(self, limit: int = 10) -> Dict:
        """
        R√©cup√©rer prochaines actions programm√©es - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            # ‚úÖ UTILISER VOS VRAIES M√âTHODES
            upcoming_actions = ScheduledAction.get_prochaines_actions(limit=limit)
            
            actions_list = []
            for action in upcoming_actions:
                device = Device.query.get(action.appareil_id)
                actions_list.append({
                    "action_id": action.id,
                    "device_id": action.appareil_id,
                    "device_name": getattr(device, 'nom_appareil', 'Inconnu') if device else "Inconnu",
                    "action_type": action.action_type,
                    "scheduled_time": action.prochaine_execution.isoformat(),
                    "time_until": str(action.prochaine_execution - datetime.utcnow()),
                    "nom_action": action.nom_action,
                    "jours_semaine_noms": action.get_jours_semaine_noms(),
                    "custom_command": action.custom_command
                })
            
            return {
                "success": True,
                "upcoming_actions": actions_list,
                "count": len(actions_list),
                "query_timestamp": datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration actions programm√©es: {e}")
            return {"success": False, "error": str(e)}
    
    # =================== M√âTHODES UTILITAIRES CORRIG√âES ===================
    
    def _get_device_by_id(self, device_id: str) -> Optional[Device]:
        """R√©cup√©rer appareil par ID"""
        try:
            # Essayer UUID d'abord
            device = Device.query.get(device_id)
            
            if not device:
                # Essayer tuya_device_id si l'attribut existe
                try:
                    device = Device.query.filter_by(tuya_device_id=device_id).first()
                except:
                    pass
            
            return device
            
        except Exception as e:
            self.logger.error(f"Erreur r√©cup√©ration device {device_id}: {e}")
            return None
    
    def _get_device_protection_config(self, device: Device) -> Dict:
        """R√©cup√©rer configuration protection avec fallback"""
        try:
            # Essayer diff√©rentes m√©thodes selon votre mod√®le Device
            if hasattr(device, 'get_protection_config'):
                return device.get_protection_config() or self.default_protection_config
            elif hasattr(device, 'protection_config'):
                return device.protection_config or self.default_protection_config
            elif hasattr(device, 'config') and device.config:
                return device.config.get('protection', self.default_protection_config)
            else:
                return self.default_protection_config
        except:
            return self.default_protection_config
    
    def _get_device_schedule_config(self, device: Device) -> Dict:
        """R√©cup√©rer configuration horaires avec fallback"""
        try:
            # Essayer diff√©rentes m√©thodes selon votre mod√®le Device
            if hasattr(device, 'get_horaires_config'):
                return device.get_horaires_config() or {}
            elif hasattr(device, 'horaires_config'):
                return device.horaires_config or {}
            elif hasattr(device, 'config') and device.config:
                return device.config.get('horaires', {})
            else:
                return {}
        except:
            return {}
    
    def _create_protection_event_with_your_model(self, device: Device, event_type: str, reason: str, trigger_data: Any) -> Optional[ProtectionEvent]:
        """
        Cr√©er √©v√©nement protection - UTILISE VOS VRAIES M√âTHODES
        """
        try:
            # ‚úÖ CORRECTION : Utiliser VOS vraies m√©thodes ProtectionEvent
            
            # Mapper les types d'√©v√©nements vers vos enums
            type_protection_map = {
                'auto_shutdown': 'autre',
                'tension_high': 'tension_anormale',
                'tension_low': 'tension_anormale', 
                'courant_high': 'courant_depasse',
                'temperature_high': 'temperature_haute'
            }
            
            type_protection = type_protection_map.get(event_type, 'autre')
            action_effectuee = 'arret_appareil' if 'shutdown' in event_type else 'alerte_envoyee'
            
            # Extraire valeurs de d√©clenchement
            valeur_declenchement = None
            valeur_seuil = None
            unite_mesure = None
            
            if isinstance(trigger_data, list) and trigger_data:
                first_event = trigger_data[0]
                if isinstance(first_event, dict):
                    valeur_declenchement = first_event.get('measured_value')
                    valeur_seuil = first_event.get('threshold')
                    
                    # D√©terminer l'unit√©
                    if 'tension' in event_type:
                        unite_mesure = 'V'
                    elif 'courant' in event_type:
                        unite_mesure = 'A'
                    elif 'temperature' in event_type:
                        unite_mesure = '¬∞C'
            
            # ‚úÖ UTILISER VOTRE VRAIE M√âTHODE
            protection_event = ProtectionEvent.creer_evenement_protection(
                client_id=device.client_id,
                appareil_id=device.id,
                type_protection=type_protection,
                action_effectuee=action_effectuee,
                valeur_declenchement=valeur_declenchement,
                valeur_seuil=valeur_seuil,
                unite_mesure=unite_mesure,
                type_systeme='monophase',
                etat_avant='on',
                etat_apres='off' if 'shutdown' in action_effectuee else 'on'
            )
            
            if protection_event and reason:
                protection_event.description = reason
                db.session.commit()
            
            return protection_event
            
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation protection event: {e}")
            return None
    
    def _create_scheduled_actions_with_your_model(self, device: Device, schedule_config: Dict):
        """Cr√©er actions programm√©es - UTILISE VOS VRAIES M√âTHODES"""
        try:
            # ‚úÖ SUPPRIMER anciennes actions avec vos m√©thodes
            old_actions = ScheduledAction.get_actions_by_device(device.id)
            for action in old_actions:
                if action.action_type in ["turn_on", "turn_off"]:
                    action.desactiver()
            
            # ‚úÖ CR√âER action allumage avec votre vraie m√©thode
            allumage_config = schedule_config.get('allumage', {})
            if allumage_config.get('enabled', True):
                time_str = allumage_config.get('time', '07:00')
                days = allumage_config.get('days', [1, 2, 3, 4, 5])
                
                ScheduledAction.creer_action_simple(
                    client_id=device.client_id,
                    appareil_id=device.id,
                    action_type='turn_on',
                    heure=time_str,
                    jours=days,
                    nom_action=f"Allumage automatique - {getattr(device, 'nom_appareil', device.id)}"
                )
            
            # ‚úÖ CR√âER action extinction avec votre vraie m√©thode
            extinction_config = schedule_config.get('extinction', {})
            if extinction_config.get('enabled', True):
                time_str = extinction_config.get('time', '22:00')
                days = extinction_config.get('days', [1, 2, 3, 4, 5, 6, 7])
                
                ScheduledAction.creer_action_simple(
                    client_id=device.client_id,
                    appareil_id=device.id,
                    action_type='turn_off',
                    heure=time_str,
                    jours=days,
                    nom_action=f"Extinction automatique - {getattr(device, 'nom_appareil', device.id)}"
                )
                
        except Exception as e:
            self.logger.error(f"Erreur cr√©ation actions programm√©es: {e}")
    
    # =================== M√âTHODES DE V√âRIFICATION SEUILS ===================
    
    def _check_tension_protection(self, device_data: DeviceData, device: Device, config: Dict) -> Optional[Dict]:
        """V√©rifier protection tension"""
        if not config.get('enabled', True):
            return None
        
        tension = device_data.tension
        if tension is None:
            return None
        
        min_threshold = config.get('min_threshold', 200.0)
        max_threshold = config.get('max_threshold', 250.0)
        auto_shutdown = config.get('auto_shutdown', True)
        
        if tension < min_threshold:
            return {
                'type': 'tension_low',
                'measured_value': tension,
                'threshold': min_threshold,
                'requires_shutdown': auto_shutdown,
                'severity': 'critical',
                'message': f'Tension trop basse: {tension}V < {min_threshold}V'
            }
        elif tension > max_threshold:
            return {
                'type': 'tension_high',
                'measured_value': tension,
                'threshold': max_threshold,
                'requires_shutdown': auto_shutdown,
                'severity': 'critical',
                'message': f'Tension trop √©lev√©e: {tension}V > {max_threshold}V'
            }
        
        return None
    
    def _check_courant_protection(self, device_data: DeviceData, device: Device, config: Dict) -> Optional[Dict]:
        """V√©rifier protection courant"""
        if not config.get('enabled', True):
            return None
        
        courant = device_data.courant
        if courant is None:
            return None
        
        max_threshold = config.get('max_threshold', 20.0)
        auto_shutdown = config.get('auto_shutdown', True)
        
        if courant > max_threshold:
            return {
                'type': 'courant_high',
                'measured_value': courant,
                'threshold': max_threshold,
                'requires_shutdown': auto_shutdown,
                'severity': 'critical',
                'message': f'Courant trop √©lev√©: {courant}A > {max_threshold}A'
            }
        
        return None
    
    def _check_temperature_protection(self, device_data: DeviceData, device: Device, config: Dict) -> Optional[Dict]:
        """V√©rifier protection temp√©rature"""
        if not config.get('enabled', True):
            return None
        
        temperature = device_data.temperature
        if temperature is None:
            return None
        
        max_threshold = config.get('max_threshold', 60.0)
        auto_shutdown = config.get('auto_shutdown', True)
        
        if temperature > max_threshold:
            return {
                'type': 'temperature_high',
                'measured_value': temperature,
                'threshold': max_threshold,
                'requires_shutdown': auto_shutdown,
                'severity': 'critical',
                'message': f'Temp√©rature trop √©lev√©e: {temperature}¬∞C > {max_threshold}¬∞C'
            }
        
        return None
    
    def _get_restart_delay_for_trigger(self, trigger_data: Any) -> int:
        """D√©terminer d√©lai de red√©marrage selon le d√©clencheur"""
        if not isinstance(trigger_data, list):
            return 1  # D√©faut 1 minute
        
        # Analyser les √©v√©nements pour d√©terminer le d√©lai appropri√©
        max_delay = 1
        for event in trigger_data:
            if isinstance(event, dict):
                event_type = event.get('type', '')
                
                if 'temperature' in event_type:
                    max_delay = max(max_delay, 10)  # 10 min pour temp√©rature
                elif 'courant' in event_type:
                    max_delay = max(max_delay, 5)   # 5 min pour courant
                elif 'tension' in event_type:
                    max_delay = max(max_delay, 1)   # 1 min pour tension
        
        return max_delay
    
    # =================== M√âTHODES DE VALIDATION ===================
    
    def _validate_protection_config(self, config: Dict) -> Dict:
        """Valider et enrichir configuration protection"""
        validated = self.default_protection_config.copy()
        
        if not isinstance(config, dict):
            return validated
        
        # Fusionner avec configuration fournie
        for protection_type, settings in config.items():
            if protection_type in validated and isinstance(settings, dict):
                validated[protection_type].update(settings)
        
        # Validation des seuils
        for protection_type in ['tension_protection', 'courant_protection', 'temperature_protection']:
            if protection_type in validated:
                settings = validated[protection_type]
                
                # S'assurer que les seuils sont num√©riques
                for threshold_key in ['min_threshold', 'max_threshold']:
                    if threshold_key in settings:
                        try:
                            settings[threshold_key] = float(settings[threshold_key])
                        except (ValueError, TypeError):
                            del settings[threshold_key]
                
                # Valider restart_delay_minutes
                if 'restart_delay_minutes' in settings:
                    try:
                        delay = int(settings['restart_delay_minutes'])
                        settings['restart_delay_minutes'] = max(1, min(delay, 60))  # Entre 1 et 60 minutes
                    except (ValueError, TypeError):
                        settings['restart_delay_minutes'] = 1
                
                # Valider max_retries
                if 'max_retries' in settings:
                    try:
                        retries = int(settings['max_retries'])
                        settings['max_retries'] = max(0, min(retries, 10))  # Entre 0 et 10
                    except (ValueError, TypeError):
                        settings['max_retries'] = 3
        
        return validated
    
    def _validate_schedule_config(self, config: Dict) -> Dict:
        """Valider configuration horaires"""
        default_schedule = {
            "enabled": True,
            "timezone": "Africa/Dakar",
            "override_protection": False,
            "allumage": {
                "enabled": True,
                "time": "07:00",
                "days": [1, 2, 3, 4, 5],  # Lundi-Vendredi
                "force_on": True
            },
            "extinction": {
                "enabled": True,
                "time": "22:00",
                "days": [1, 2, 3, 4, 5, 6, 7],  # Tous les jours
                "force_off": True
            }
        }
        
        if not isinstance(config, dict):
            return default_schedule
        
        validated = default_schedule.copy()
        validated.update(config)
        
        # Valider format des heures
        for action_type in ['allumage', 'extinction']:
            if action_type in validated and isinstance(validated[action_type], dict):
                action_config = validated[action_type]
                
                # Valider format heure (HH:MM)
                if 'time' in action_config:
                    try:
                        time_str = action_config['time']
                        datetime.strptime(time_str, '%H:%M')
                    except ValueError:
                        action_config['time'] = default_schedule[action_type]['time']
                
                # Valider jours (1-7)
                if 'days' in action_config:
                    if isinstance(action_config['days'], list):
                        valid_days = [d for d in action_config['days'] if isinstance(d, int) and 1 <= d <= 7]
                        action_config['days'] = valid_days if valid_days else default_schedule[action_type]['days']
                    else:
                        action_config['days'] = default_schedule[action_type]['days']
        
        return validated
    
    # =================== M√âTHODES DE CACHE REDIS ===================
    
    def _cache_protection_config(self, device_id: str, config: Dict):
        """Mettre en cache configuration protection"""
        if not self.redis:
            return
        
        try:
            key = f"protection_config:{device_id}"
            ttl = self.protection_cache_config['protection_status_ttl']
            
            cache_data = {
                'config': config,
                'cached_at': datetime.utcnow().isoformat()
            }
            
            self.redis.setex(key, ttl, json.dumps(cache_data))
            
        except Exception as e:
            self.logger.error(f"Erreur cache protection config: {e}")
    
    def _cache_schedule_config(self, device_id: str, config: Dict):
        """Mettre en cache configuration horaires"""
        if not self.redis:
            return
        
        try:
            key = f"schedule_config:{device_id}"
            ttl = self.protection_cache_config['schedule_cache_ttl']
            
            cache_data = {
                'config': config,
                'cached_at': datetime.utcnow().isoformat()
            }
            
            self.redis.setex(key, ttl, json.dumps(cache_data))
            
        except Exception as e:
            self.logger.error(f"Erreur cache schedule config: {e}")
    
    def _cache_protection_event(self, device_id: str, event: Any):
        """Mettre en cache √©v√©nement protection"""
        if not self.redis:
            return
        
        try:
            key = f"protection_event:{device_id}:{int(datetime.utcnow().timestamp())}"
            ttl = self.protection_cache_config['threshold_events_ttl']
            
            event_data = {
                'event_id': event.id if event else None,
                'timestamp': datetime.utcnow().isoformat(),
                'device_id': device_id
            }
            
            self.redis.setex(key, ttl, json.dumps(event_data))
            
        except Exception as e:
            self.logger.error(f"Erreur cache protection event: {e}")
    
    def _add_to_restart_queue(self, device_id: str, action_id: str, restart_time: datetime):
        """Ajouter √† la queue de red√©marrage Redis"""
        if not self.redis:
            return
        
        try:
            queue_key = "restart_queue"
            restart_data = {
                'device_id': device_id,
                'action_id': action_id,
                'restart_time': restart_time.isoformat(),
                'queued_at': datetime.utcnow().isoformat()
            }
            
            # Score = timestamp pour tri chronologique
            score = restart_time.timestamp()
            self.redis.zadd(queue_key, {json.dumps(restart_data): score})
            
            # TTL sur la queue
            self.redis.expire(queue_key, self.protection_cache_config['restart_queue_ttl'])
            
        except Exception as e:
            self.logger.error(f"Erreur ajout restart queue: {e}")
    
    def _is_shutdown_in_progress(self, device_id: str) -> bool:
        """V√©rifier si extinction en cours"""
        if not self.redis:
            return False
        
        try:
            key = f"shutdown_in_progress:{device_id}"
            return bool(self.redis.exists(key))
        except:
            return False
    
    def _mark_shutdown_in_progress(self, device_id: str, reason: str):
        """Marquer extinction en cours"""
        if not self.redis:
            return
        
        try:
            key = f"shutdown_in_progress:{device_id}"
            data = {
                'reason': reason,
                'started_at': datetime.utcnow().isoformat()
            }
            self.redis.setex(key, 300, json.dumps(data))  # 5 minutes max
        except Exception as e:
            self.logger.error(f"Erreur mark shutdown: {e}")
    
    def _clear_shutdown_in_progress(self, device_id: str):
        """Nettoyer marqueur extinction"""
        if not self.redis:
            return
        
        try:
            key = f"shutdown_in_progress:{device_id}"
            self.redis.delete(key)
        except Exception as e:
            self.logger.error(f"Erreur clear shutdown: {e}")
    
    def _clear_schedule_cache(self, device_id: str):
        """Nettoyer cache programmation"""
        if not self.redis:
            return
        
        try:
            patterns = [
                f"schedule_config:{device_id}",
                f"next_actions:{device_id}:*"
            ]
            
            for pattern in patterns:
                if "*" in pattern:
                    keys = self.redis.keys(pattern)
                    if keys:
                        self.redis.delete(*keys)
                else:
                    self.redis.delete(pattern)
            
        except Exception as e:
            self.logger.error(f"Erreur clear schedule cache: {e}")
    
    # =================== M√âTHODES DE LOGGING ===================
    
    def _log_protection_event(self, device: Device, event_data: Dict):
        """Logger √©v√©nement protection"""
        try:
            event_type = event_data.get('type', 'unknown')
            severity = event_data.get('severity', 'info')
            message = event_data.get('message', '√âv√©nement protection')
            
            self.logger.info(f"üõ°Ô∏è Protection Event - Device {device.id}: {message} (Type: {event_type}, Severity: {severity})")
            
        except Exception as e:
            self.logger.error(f"Erreur log protection event: {e}")
    
    def _log_restart_event(self, device: Device, action: ScheduledAction):
        """Logger √©v√©nement restart"""
        try:
            self.logger.info(f"‚ö° Restart automatique ex√©cut√© - Device {device.id}: Action {action.id}")
            
        except Exception as e:
            self.logger.error(f"Erreur log restart event: {e}")
    
    def _log_scheduled_event(self, device: Device, action: ScheduledAction, command: str, value: Any):
        """Logger √©v√©nement programm√©"""
        try:
            action_type = action.action_type
            device_name = getattr(device, 'nom_appareil', device.id)
            
            self.logger.info(f"üìÖ Action programm√©e ex√©cut√©e - {device_name} ({device.id}): {action_type} ({command}={value})")
            
        except Exception as e:
            self.logger.error(f"Erreur log scheduled event: {e}")
    
    # =================== INT√âGRATION AVEC DeviceService EXISTANT ===================
    
    def enhance_save_device_data_protection(self, device: Device, device_data: DeviceData) -> Dict:
        """
        ‚úÖ Enhancement pour protection automatique
        Appel√©e APR√àS sauvegarde DeviceData pour v√©rifier seuils
        """
        try:
            protection_active = getattr(device, 'protection_automatique_active', False)
            if not protection_active:
                return {"success": True, "protection_checked": False, "reason": "Protection d√©sactiv√©e"}
            
            self.logger.debug(f"üõ°Ô∏è V√©rification protection pour device {device.id}")
            
            # V√©rifier seuils de protection
            protection_result = self.check_device_thresholds(device_data, device)
            
            if protection_result.get('protection_triggered'):
                self.logger.warning(f"üö® Protection d√©clench√©e pour device {device.id}")
            
            return protection_result
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur enhancement protection device {device.id}: {e}")
            return {"success": False, "error": str(e)}
    
    def enhance_control_device_with_schedule_check(self, device_id: str, command: str, value: Any) -> Dict:
        """
        ‚úÖ Enhancement pour v√©rifier override programmation
        V√©rifie si commande manuelle doit override la programmation
        """
        try:
            device = self._get_device_by_id(device_id)
            programmation_active = getattr(device, 'programmation_active', False)
            
            if not device or not programmation_active:
                return {"override_required": False, "reason": "Pas de programmation active"}
            
            # V√©rifier si c'est une commande manuelle qui override la programmation
            if command == "switch" and isinstance(value, bool):
                # Marquer en mode manuel temporaire
                self._set_manual_mode(device.id, duration_minutes=60)
                
                return {
                    "override_required": True,
                    "manual_mode_set": True,
                    "duration_minutes": 60,
                    "message": "Mode manuel activ√© - programmation suspendue pendant 1h"
                }
            
            return {"override_required": False}
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur v√©rification override: {e}")
            return {"override_required": False, "error": str(e)}
    
    def _set_manual_mode(self, device_id: str, duration_minutes: int = 60):
        """Activer mode manuel temporaire"""
        if not self.redis:
            return
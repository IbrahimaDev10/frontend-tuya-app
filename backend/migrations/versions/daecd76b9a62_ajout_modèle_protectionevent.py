"""Ajout mod√®le ProtectionEvent

Revision ID: daecd76b9a62
Revises: ede8bb64ccc4
Create Date: 2025-06-29 20:11:52.239244

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'daecd76b9a62'
down_revision = 'ede8bb64ccc4'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('alerts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('type_systeme', sa.Enum('monophase', 'triphase', name='system_type_alert'), nullable=False))
        batch_op.add_column(sa.Column('phase_concernee', sa.Enum('L1', 'L2', 'L3', 'neutre', 'toutes', name='phase_type'), nullable=True))
        batch_op.add_column(sa.Column('valeurs_phases', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('seuils_phases', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('priorite', sa.Integer(), nullable=False))
        batch_op.create_index(batch_op.f('ix_alerts_phase_concernee'), ['phase_concernee'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_priorite'), ['priorite'], unique=False)
        batch_op.create_index(batch_op.f('ix_alerts_type_systeme'), ['type_systeme'], unique=False)

    with op.batch_alter_table('device_data', schema=None) as batch_op:
        batch_op.add_column(sa.Column('type_systeme', sa.Enum('monophase', 'triphase', name='system_type'), nullable=False))
        batch_op.add_column(sa.Column('tension_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('tension_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('tension_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('tension_l1_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('tension_l2_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('tension_l3_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('courant_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('courant_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('courant_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('courant_neutre', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_totale', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_reactive_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_reactive_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_reactive_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_reactive_totale', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_apparente_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_apparente_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_apparente_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('puissance_apparente_totale', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('facteur_puissance_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('facteur_puissance_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('facteur_puissance_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('facteur_puissance_total', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('frequence', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('energie_l1', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('energie_l2', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('energie_l3', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('energie_totale', sa.Float(), nullable=True))
        batch_op.create_index('idx_system_type_time', ['type_systeme', 'horodatage'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_data_type_systeme'), ['type_systeme'], unique=False)

    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.add_column(sa.Column('type_systeme', sa.Enum('monophase', 'triphase', name='electrical_system_type'), nullable=False))
        batch_op.add_column(sa.Column('seuil_tension_l1_min', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_tension_l1_max', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_tension_l2_min', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_tension_l2_max', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_tension_l3_min', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_tension_l3_max', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_courant_l1_max', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_courant_l2_max', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_courant_l3_max', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_desequilibre_tension', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_desequilibre_courant', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('seuil_facteur_puissance_min', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('protection_automatique_active', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('seuil_temperature_max', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('protection_courant_config', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('protection_puissance_config', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('protection_temperature_config', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('protection_triggers_count', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('derniere_protection_declenchee', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('derniere_protection_type', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('protection_status', sa.Enum('normal', 'protected', 'error', name='protection_status_type'), nullable=False))
        batch_op.add_column(sa.Column('programmation_active', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('horaires_config', sa.JSON(), nullable=True))
        batch_op.add_column(sa.Column('prochaine_action_programmee', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('prochaine_action_type', sa.Enum('turn_on', 'turn_off', 'custom', name='scheduled_action_type'), nullable=True))
        batch_op.add_column(sa.Column('derniere_action_programmee', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('derniere_action_programmee_type', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('derniere_action_programmee_status', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('mode_manuel_actif', sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column('mode_manuel_jusqu', sa.DateTime(), nullable=True))
        batch_op.create_index(batch_op.f('ix_devices_programmation_active'), ['programmation_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_devices_protection_automatique_active'), ['protection_automatique_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_devices_protection_status'), ['protection_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_devices_type_systeme'), ['type_systeme'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_devices_type_systeme'))
        batch_op.drop_index(batch_op.f('ix_devices_protection_status'))
        batch_op.drop_index(batch_op.f('ix_devices_protection_automatique_active'))
        batch_op.drop_index(batch_op.f('ix_devices_programmation_active'))
        batch_op.drop_column('mode_manuel_jusqu')
        batch_op.drop_column('mode_manuel_actif')
        batch_op.drop_column('derniere_action_programmee_status')
        batch_op.drop_column('derniere_action_programmee_type')
        batch_op.drop_column('derniere_action_programmee')
        batch_op.drop_column('prochaine_action_type')
        batch_op.drop_column('prochaine_action_programmee')
        batch_op.drop_column('horaires_config')
        batch_op.drop_column('programmation_active')
        batch_op.drop_column('protection_status')
        batch_op.drop_column('derniere_protection_type')
        batch_op.drop_column('derniere_protection_declenchee')
        batch_op.drop_column('protection_triggers_count')
        batch_op.drop_column('protection_temperature_config')
        batch_op.drop_column('protection_puissance_config')
        batch_op.drop_column('protection_courant_config')
        batch_op.drop_column('seuil_temperature_max')
        batch_op.drop_column('protection_automatique_active')
        batch_op.drop_column('seuil_facteur_puissance_min')
        batch_op.drop_column('seuil_desequilibre_courant')
        batch_op.drop_column('seuil_desequilibre_tension')
        batch_op.drop_column('seuil_courant_l3_max')
        batch_op.drop_column('seuil_courant_l2_max')
        batch_op.drop_column('seuil_courant_l1_max')
        batch_op.drop_column('seuil_tension_l3_max')
        batch_op.drop_column('seuil_tension_l3_min')
        batch_op.drop_column('seuil_tension_l2_max')
        batch_op.drop_column('seuil_tension_l2_min')
        batch_op.drop_column('seuil_tension_l1_max')
        batch_op.drop_column('seuil_tension_l1_min')
        batch_op.drop_column('type_systeme')

    with op.batch_alter_table('device_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_device_data_type_systeme'))
        batch_op.drop_index('idx_system_type_time')
        batch_op.drop_column('energie_totale')
        batch_op.drop_column('energie_l3')
        batch_op.drop_column('energie_l2')
        batch_op.drop_column('energie_l1')
        batch_op.drop_column('frequence')
        batch_op.drop_column('facteur_puissance_total')
        batch_op.drop_column('facteur_puissance_l3')
        batch_op.drop_column('facteur_puissance_l2')
        batch_op.drop_column('facteur_puissance_l1')
        batch_op.drop_column('puissance_apparente_totale')
        batch_op.drop_column('puissance_apparente_l3')
        batch_op.drop_column('puissance_apparente_l2')
        batch_op.drop_column('puissance_apparente_l1')
        batch_op.drop_column('puissance_reactive_totale')
        batch_op.drop_column('puissance_reactive_l3')
        batch_op.drop_column('puissance_reactive_l2')
        batch_op.drop_column('puissance_reactive_l1')
        batch_op.drop_column('puissance_totale')
        batch_op.drop_column('puissance_l3')
        batch_op.drop_column('puissance_l2')
        batch_op.drop_column('puissance_l1')
        batch_op.drop_column('courant_neutre')
        batch_op.drop_column('courant_l3')
        batch_op.drop_column('courant_l2')
        batch_op.drop_column('courant_l1')
        batch_op.drop_column('tension_l3_l1')
        batch_op.drop_column('tension_l2_l3')
        batch_op.drop_column('tension_l1_l2')
        batch_op.drop_column('tension_l3')
        batch_op.drop_column('tension_l2')
        batch_op.drop_column('tension_l1')
        batch_op.drop_column('type_systeme')

    with op.batch_alter_table('alerts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_alerts_type_systeme'))
        batch_op.drop_index(batch_op.f('ix_alerts_priorite'))
        batch_op.drop_index(batch_op.f('ix_alerts_phase_concernee'))
        batch_op.drop_column('priorite')
        batch_op.drop_column('seuils_phases')
        batch_op.drop_column('valeurs_phases')
        batch_op.drop_column('phase_concernee')
        batch_op.drop_column('type_systeme')

    # ### end Alembic commands ###
